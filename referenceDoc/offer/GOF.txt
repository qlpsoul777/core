1、简述一下你了解的设计模式？
	所谓设计模式，就是一套被反复使用的代码设计经验的总结（情境中一个问题经过证实的一个解决方案）。
	使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使人们可以更加简
	单方便的复用成功的设计和体系结构。将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其
	设计思路。
	
	常用的
	- 工厂模式：工厂类可以根据条件生成不同的子类实例，这些子类有一个公共的抽象父类并且实现了相同的
	方法，但是这些方法针对不同的数据进行了不同的操作（多态方法）。当得到子类的实例后，开发人员可以
	调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。
	- 代理模式：给一个对象提供一个代理对象，并由代理对象控制原对象的引用。实际开发中，按照使用目的
	的不同，代理可以分为：远程代理、虚拟代理、保护代理、Cache代理、防火墙代理、同步化代理、智能
	引用代理。
	- 适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起
	使用的类能够一起工作。
	- 模板方法模式：提供一个抽象类，将部分逻辑以具体方法或构造器的形式实现，然后声明一些抽象方法来
	迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法（多态实现），从而实现不同的
	业务逻辑。

2、請寫一個單例？
    懒汉式：
        public class LazySingleton {
            private static LazySingleton instance;

            private LazySingleton() {}

            public static synchronized LazySingleton getInstance() {
                if (instance == null) {
                    instance = new LazySingleton();
                }
                return instance;
            }

        }
        这种写法能够在多线程中很好的工作，而且看起来它也具备很好的lazy loading，但是，遗憾的是，
        效率很低，99%情况下不需要同步。

    饿汉式：
        public class HungrySingleton {

        	private static HungrySingleton instance = new HungrySingleton();

        	private HungrySingleton(){}

        	public static HungrySingleton getInstance(){
        		return instance;
        	}

        }
        这种方式基于ClassLoader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，
        显然没有达到lazy loading的效果。

    静态内部类：
        public class StaticSingleton {

        	private StaticSingleton(){}

        	private static class SingletonHolder{
        		private static final StaticSingleton instance = new StaticSingleton();
        	}

        	public static final StaticSingleton getInstance(){
        		return SingletonHolder.instance;
        	}

        }
        这种方式同样利用了ClassLoader的机制来保证初始化instance时只有一个线程，它跟第二种不同的是
        （很细微的差别）：第二种方式是只要Singleton类被装载了，那么instance就会被实例化（没有达到
        lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为
        SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载
        SingletonHolder类，从而实例化instance。想象一下，如果实例化instance很消耗资源，我想让他延
        迟加载，另外一方面，我不希望在Singleton类加载时就实例化，因为我不能确保Singleton类还可能在
        其他的地方被主动使用从而被加载，那么这个时候实例化instance显然是不合适的。这个时候，这种方
        式相比第二种方式就显得更合理。

    枚举类：
        public enum EnumSingleton {

        	INSTANCE;

        	public void otherMethod(){
        		System.out.println("execute other method");
        	}

        }
        它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊，不过，
        个人认为由于1.5中才加入enum特性，用这种方式写不免让人感觉生疏。

    双重校验锁：
        public class DoubleCheckSingleton {

        	private DoubleCheckSingleton(){}

        	private volatile static DoubleCheckSingleton instance;

        	public static DoubleCheckSingleton getInstance(){
        		if(instance == null){
        			synchronized (DoubleCheckSingleton.class) {
        				if(instance == null){
        					instance = new DoubleCheckSingleton();
        				}
        			}
        		}
        		return instance;
        	}

        }
        在JDK1.5之后，双重检查锁定才能够正常达到单例效果。
        


