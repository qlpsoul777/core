1、

2、什么是IoC和DI？DI是如何实现的？
	IoC叫控制反转，是Inversion of Control的缩写，DI（Dependency Injection）
	叫依赖注入，是对IoC更简单的诠释。控制反转是把传统上由程序代码直接操控的对象的调用权交
	给容器，通过容器来实现对象组件的装配和管理。所谓的”控制反转”就是对组件对象控制权的
	转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。
	依赖注入的基本原则是应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该
	由容器负责，查找资源的逻辑应该从应用组件的代码中抽取出来，交给容器来完成。DI是对IoC
	更准确的描述，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某
	种依赖关系注入到组件之中。
	举个例子：一个类A需要用到接口B中的方法，那么就需要为类A和接口B建立关联或依赖关系，
	最原始的方法是在类A中创建一个接口B的实现类C的实例，但这种方法需要开发人员自行维护
	二者的依赖关系，也就是说当依赖关系发生变动的时候需要修改代码并重新构建整个系统。如
	果通过一个容器来管理这些对象以及对象的依赖关系，则只需要在类A中定义好用于关联接口B
	的方法（构造器或setter方法），将类A和接口B的实现类C放入容器中，通过对容器的配置
	来实现二者的关联。
	依赖注入可以通过setter方法注入（设值注入）、构造器注入和接口注入三种方式来实现，
	Spring支持setter注入和构造器注入，通常使用构造器注入来注入必须的依赖关系，对于
	可选的依赖关系，则setter注入是更好的选择，setter注入需要类提供无参构造器或者无参
	的静态工厂方法来创建对象。
	
3、Spring中Bean的作用域有哪些？
	在Spring的早期版本中，仅有两个作用域：singleton和prototype，前者表示Bean以单
	例的方式存在；后者表示每次从容器中调用Bean时，都会返回一个新的实例，prototype
	通常翻译为原型。
    	*：设计模式中的创建型模式中也有一个原型模式，原型模式也是一个常用的模式，例如做一个
		室内设计软件，所有的素材都在工具箱中，而每次从工具箱中取出的都是素材对象的一个原型，
		可以通过对象克隆来实现原型模式。
		
4、解释一下AOP（面向切面编程）？
	AOP（Aspect-Oriented Programming）指一种程序设计范型，该范型以一种称为切面
	（aspect）的语言构造为基础，切面是一种新的模块化机制，用来描述分散在对象、类或方法中
	的横切关注点（crosscutting concern）。
	
	”横切关注”是会影响到整个应用程序的关注功能，它跟正常的业务逻辑是正交的，没有必然的联
	系，但是几乎所有的业务逻辑都会涉及到这些关注功能。通常，事务、日志、安全性等关注就是
	应用中的横切关注功能。
	
	a. 连接点（Joinpoint）：程序执行的某个特定位置（如：某个方法调用前、调用后，
	方法抛出异常后）。一个类或一段程序代码拥有一些具有边界性质的特定点，这些代码中的特定
	点就是连接点。Spring仅支持方法的连接点。
	b. 切点（Pointcut）：如果连接点相当于数据中的记录，那么切点相当于查询条件，一个切点
	可以匹配多个连接点。Spring AOP的规则解析引擎负责解析切点所设定的查询条件，找到对应
	的连接点。
	c. 增强（Advice）：增强是织入到目标类连接点上的一段程序代码。Spring提供的增强接口
	都是带方位名的，如：BeforeAdvice、AfterReturningAdvice、ThrowsAdvice等。
	d. 引介（Introduction）：引介是一种特殊的增强，它为类添加一些属性和方法。这样，
	即使一个业务类原本没有实现某个接口，通过引介功能，可以动态的未该业务类添加接口的实现
	逻辑，让业务类成为这个接口的实现类。
	e. 织入（Weaving）：织入是将增强添加到目标类具体连接点上的过程，AOP有三种织入方式：
	①编译期织入：需要特殊的Java编译期（例如AspectJ的ajc）；
	②装载期织入：要求使用特殊的类加载器，在装载类的时候对类进行增强；
	③运行时织入：在运行时为目标类生成代理实现增强。Spring采用了动态代理的方式实现了运行
	时织入，而AspectJ采用了编译期织入和装载期织入的方式。
	f. 切面（Aspect）：切面是由切点和增强（引介）组成的，它包括了对横切关注功能的定义，
	也包括了对连接点的定义。
	
5、选择使用Spring框架的原因（Spring框架为企业级开发带来的好处有哪些）？
	- 非侵入式：支持基于POJO的编程模式，不强制性的要求实现Spring框架中的接口或继承
	Spring框架中的类。
	- IoC容器：IoC容器帮助应用程序管理对象以及对象之间的依赖关系，对象之间的依赖关系
	如果发生了改变只需要修改配置文件而不是修改代码，因为代码的修改可能意味着项目的重新构
	建和完整的回归测试。有了IoC容器，程序员再也不需要自己编写工厂、单例，这一点特别符
	合Spring的精神”不要重复的发明轮子”。
	- AOP（面向切面编程）：将所有的横切关注功能封装到切面（aspect）中，通过配置的方式
	将横切关注功能动态添加到目标代码上，进一步实现了业务逻辑和系统服务之间的分离。另一方
	面，有了AOP程序员可以省去很多自己写代理类的工作。
	- MVC：Spring的MVC框架是非常优秀的，从各个方面都可以甩Struts 2几条街，为Web
	表示层提供了更好的解决方案。
	- 事务管理：Spring以宽广的胸怀接纳多种持久层技术，并且为其提供了声明式的事务管理，
	在不需要任何一行代码的情况下就能够完成事务管理。
	- 其他：选择Spring框架的原因还远不止于此，Spring为Java企业级开发提供了一站式选
	择，你可以在需要的时候使用它的部分和全部，更重要的是，你甚至可以在感觉不到Spring
	存在的情况下，在你的项目中使用Spring提供的各种优秀的功能。
