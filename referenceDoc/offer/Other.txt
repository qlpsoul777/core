1、大型网站在架构上应当考虑哪些问题？
	- 分层：分层是处理任何复杂系统最常见的手段之一，将系统横向切分成若干个层面，每个层面只
	承担单一的职责，然后通过下层为上层提供的基础设施和服务以及上层对下层的调用来形成一个完
	整的复杂的系统。计算机网络的开放系统互联参考模型（OSI/RM）和Internet的TCP/IP
	模型都是分层结构，大型网站的软件系统也可以使用分层的理念将其分为持久层（提供数据存储
	和访问服务）、业务层（处理业务逻辑，系统中最核心的部分）和表示层（系统交互、视图展示）。
	需要指出的是：
	（1）分层是逻辑上的划分，在物理上可以位于同一设备上也可以在不同的设备上部署不同的功能
	模块，这样可以使用更多的计算资源来应对用户的并发访问；
	（2）层与层之间应当有清晰的边界，这样分层才有意义，才更利于软件的开发和维护。
	
	- 分割：分割是对软件的纵向切分。我们可以将大型网站的不同功能和服务分割开，形成高内聚低
	耦合的功能模块（单元）。在设计初期可以做一个粗粒度的分割，将网站分割为若干个功能模块，
	后期还可以进一步对每个模块进行细粒度的分割，这样一方面有助于软件的开发和维护，另一方面
	有助于分布式的部署，提供网站的并发处理能力和功能的扩展。
	
	- 分布式：除了上面提到的内容，网站的静态资源（JavaScript、CSS、图片等）也可以采用
	独立分布式部署并采用独立的域名，这样可以减轻应用服务器的负载压力，也使得浏览器对资源的
	加载更快。数据的存取也应该是分布式的，传统的商业级关系型数据库产品基本上都支持分布式部
	署，而新生的NoSQL产品几乎都是分布式的。当然，网站后台的业务处理也要使用分布式技术，
	例如查询索引的构建、数据分析等，这些业务计算规模庞大，可以使用Hadoop以及MapReduce
	分布式计算框架来处理。
	
	- 集群：集群使得有更多的服务器提供相同的服务，可以更好的提供对并发的支持。
	
	- 缓存：所谓缓存就是用空间换取时间的技术，将数据尽可能放在距离计算最近的位置。使用缓
	存是网站优化的第一定律。我们通常说的CDN、反向代理、热点数据都是对缓存技术的使用。
	
	- 异步：异步是实现软件实体之间解耦合的又一重要手段。异步架构是典型的生产者消费者模式，
	二者之间没有直接的调用关系，只要保持数据结构不变，彼此功能实现可以随意变化而不互相影响，
	这对网站的扩展非常有利。使用异步处理还可以提高系统可用性，加快网站的响应速度（用Ajax
	加载数据就是一种异步技术），同时还可以起到削峰作用（应对瞬时高并发）；
	能推迟处理的都要推迟处理”是网站优化的第二定律，而异步是践行网站优化第二定律的重要手段。
	
	- 冗余：各种服务器都要提供相应的冗余服务器以便在某台或某些服务器宕机时还能保证网站可
	以正常工作，同时也提供了灾难恢复的可能性。冗余是网站高可用性的重要保证。
	
2、你用过的网站前端优化的技术有哪些？
	① 浏览器访问优化：
		- 减少HTTP请求数量：合并CSS、合并JavaScript、合并图片（CSS Sprite）
		- 使用浏览器缓存：通过设置HTTP响应头中的Cache-Control和Expires属性，
		将CSS、JavaScript、图片等在浏览器中缓存，当这些静态资源需要更新时，可以
		更新HTML文件中的引用来让浏览器重新请求新的资源
		- 启用压缩
		- CSS前置，JavaScript后置
		- 减少Cookie传输
		
	② CDN加速：CDN（Content Distribute Network）的本质仍然是缓存，将数据缓存
	在离用户最近的地方，CDN通常部署在网络运营商的机房，不仅可以提升响应速度，还可以减少
	应用服务器的压力。当然，CDN缓存的通常都是静态资源。
	
	③ 反向代理：反向代理相当于应用服务器的一个门面，可以保护网站的安全性，也可以实现负载
	均衡的功能，当然最重要的是它缓存了用户访问的热点资源，可以直接从反向代理将某些内容返回
	给用户浏览器。
	
3、你使用过的应用服务器优化技术有哪些？
	① 分布式缓存：缓存的本质就是内存中的哈希表，如果设计一个优质的哈希函数，那么理论上哈希
	表读写的渐近时间复杂度为O(1)。缓存主要用来存放那些读写比很高、变化很少的数据，这样应
	用程序读取数据时先到缓存中读取，如果没有或者数据已经失效再去访问数据库或文件系统，
	并根据拟定的规则将数据写入缓存。对网站数据的访问也符合二八定律（Pareto分布，幂律分
	布），即80%的访问都集中在20%的数据上，如果能够将这20%的数据缓存起来，那么系统的性能
	将得到显著的改善。当然，使用缓存需要解决以下几个问题：
		- 频繁修改的数据；
		- 数据不一致与脏读；
		- 缓存雪崩（可以采用分布式缓存服务器集群加以解决，memcached是广泛采用的解决方
		案）；
		- 缓存预热；
		- 缓存穿透（恶意持续请求不存在的数据）。
		
	② 异步操作：可以使用消息队列将调用异步化，通过异步处理将短时间高并发产生的事件消息存
	储在消息队列中，从而起到削峰作用。电商网站在进行促销活动时，可以将用户的订单请求存入消
	息队列，这样可以抵御大量的并发订单请求对系统和数据库的冲击。目前，绝大多数的电商网站即
	便不进行促销活动，订单系统都采用了消息队列来处理。
	
	③ 使用集群。
	
	④ 代码优化：
		- 多线程：基于Java的Web开发基本上都通过多线程的方式响应用户的并发请求，使用多
		线程技术在编程上要解决线程安全问题，主要可以考虑以下几个方面：
			A. 将对象设计为无状态对象（这和面向对象的编程观点是矛盾的，在面向对象的世
			界中被视为不良设计），这样就不会存在并发访问时对象状态不一致的问题。
			B. 在方法内部创建对象，这样对象由进入方法的线程创建，不会出现多个线程访问
			同一对象的问题。使用ThreadLocal将对象与线程绑定也是很好的做法，这一点在
			前面已经探讨过了。C. 对资源进行并发访问时应当使用合理的锁机制。
		- 非阻塞I/O： 使用单线程和非阻塞I/O是目前公认的比多线程的方式更能充分发挥服务器
		性能的应用模式，基于Node.js构建的服务器就采用了这样的方式。Java在JDK 1.4
		中就引入了NIO（Non-blocking I/O）,在Servlet 3规范中又引入了异步
		Servlet的概念，这些都为在服务器端采用非阻塞I/O提供了必要的基础。
		- 资源复用：资源复用主要有两种方式，一是单例，二是对象池，我们使用的数据库连接
		池、线程池都是对象池化技术，这是典型的用空间换取时间的策略，另一方面也实现对资源
		的复用，从而避免了不必要的创建和释放资源所带来的开销。
		
4、什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？
	- XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本在用户浏览网页时
	在用户浏览器中执行恶意脚本的攻击方式。跨站脚本攻击分有两种形式：反射型攻击（诱使用户点
	击一个嵌入恶意脚本的链接以达到攻击的目标，目前有很多攻击者利用论坛、微博发布含有恶意脚
	本的URL就属于这种方式）和持久型攻击（将恶意脚本提交到被攻击网站的数据库中，用户浏览网
	页时，恶意脚本从数据库中被加载到页面执行，QQ邮箱的早期版本就曾经被利用作为持久型跨站
	脚本攻击的平台）。XSS虽然不是什么新鲜玩意，但是攻击的手法却不断翻新，防范XSS主要有
	两方面：消毒（对危险字符进行转义）和HttpOnly（防范XSS攻击者窃取Cookie数据）。
	
	- SQL注入攻击是注入攻击最常见的形式（此外还有OS注入攻击（Struts 2的高危漏洞就是
	通过OGNL实施OS注入攻击导致的）），当服务器使用请求参数构造SQL语句时，恶意的SQL被嵌
	入到SQL中交给数据库执行。SQL注入攻击需要攻击者对数据库结构有所了解才能进行，攻击者
	想要获得表结构有多种方式：
	（1）如果使用开源系统搭建网站，数据库结构也是公开的（目前有很多现成的系统可以直接搭建
	论坛，电商网站，虽然方便快捷但是风险是必须要认真评估的）；
	（2）错误回显（如果将服务器的错误信息直接显示在页面上，攻击者可以通过非法参数引发页
	面错误从而通过错误信息了解数据库结构，Web应用应当设置友好的错误页，一方面符合最小惊
	讶原则，一方面屏蔽掉可能给系统带来危险的错误回显信息）；
	（3）盲注。防范SQL注入攻击也可以采用消毒的方式，通过正则表达式对请求参数进行验证，
	此外，参数绑定也是很好的手段，这样恶意的SQL会被当做SQL的参数而不是命令被执行，
	JDBC中的PreparedStatement就是支持参数绑定的语句对象，从性能和安全性上都明显
	优于Statement。
	
	- CSRF攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请
	求，以合法的用户身份进行非法操作（如转账或发帖等）。CSRF的原理是利用浏览器的Cookie
	或服务器的Session，盗取用户身份，其原理如下图所示。防范CSRF的主要手段是识别请求者
	的身份，主要有以下几种方式：
	（1）在表单中添加令牌（token）；
	（2）验证码；
	（3）检查请求头中的Referer（前面提到防图片盗链接也是用的这种方式）。
	令牌和验证都具有一次消费性的特征，因此在原理上一致的，但是验证码是一种
	糟糕的用户体验，不是必要的情况下不要轻易使用验证码，目前很多网站的做法
	是如果在短时间内多次提交一个表单未获得成功后才要求提供验证码，这样会获
	得较好的用户体验。
	
5、什么是领域模型(domain model)？贫血模型(anaemic domain model)
和充血模型(rich domain model)有什么区别？
	领域模型是领域内的概念类或现实世界中对象的可视化表示，又称为概念模型或分析对象模型，
	它专注于分析问题领域本身，发掘重要的业务领域概念，并建立业务领域概念之间的关系。
	
	贫血模型是指使用的领域对象中只有setter和getter方法（POJO），所有的业务
	逻辑都不包含在领域对象中而是放在业务逻辑层。有人将我们这里说的贫血模型进
	一步划分成失血模型（领域对象完全没有业务逻辑）和贫血模型（领域对象有少量的业务
	逻辑）。
	
	充血模型将大多数业务逻辑和持久化放在领域对象中，业务逻辑（业务门面）
	只是完成对业务逻辑的封装、事务和权限等的处理。
	