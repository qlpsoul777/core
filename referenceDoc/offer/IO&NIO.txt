1、NIO与IO的区别？
	传统的IO又称BIO，即阻塞式IO，NIO就是非阻塞IO了。还有一种AIO就是异步IO
	Java IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，直到
	有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使
	一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都
	不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写
	也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。

2、Java中有几种类型的流？
	字节流和字符流。字节流继承于InputStream、OutputStream，字符流继承于Reader、Writer。
	在java.io 包中还有许多其他的流，主要是为了提高性能和使用方便。关于Java的I/O需要注意的有两
	点：一是两种对称性（输入和输出的对称性，字节和字符的对称性）；二是两种设计模式（适配器模式和装潢
	模式）。

3、Java中如何实现序列化，有什么意义？
	序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行
	读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题
	（如果不进行序列化可能会存在数据乱序的问题）。要实现序列化，需要让一个类实现Serializable
	接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出
	流并通过writeObject(Object)方法就可以将实现对象写出（即保存其状态）；如果需要反序列化则
	可以用一个输入流建立对象输入流，然后通过readObject方法从流中读取对象。序列化除了能够实现对
	象的持久化之外，还能够用于对象的深度克隆。

4、io体系
分类				字节流										字符流
			输入流				输出流					输入流			输出流
抽象基类	InputStream			OutputStream			Reader				Writer	
转换流												InputStreamReader	OutputStreamWriter
访问字符串												StringReader		StringWriter	
访问文件	FileInputStream		FileOutputStream		FileReader			FileWriter
缓冲流	BufferedInputStream	BufferedOutputStream	BufferedReader		BufferedWriter

5、

6、

7、

8、

9、

10、