1、什麽是抽象類？
    使用了关键词abstract声明的类叫作“抽象类”。如果一个类里包含了一个或多个抽象方法，类就必须指定
    成abstract（抽象）。“抽象方法”,属于一种不完整的方法，只含有一个声明，没有方法主体。
    在《JAVA编程思想》一书中，将抽象类定义为“包含抽象方法的类”，但是后面发现如果一个类不包含抽象
    方法，只是用abstract修饰的话也是抽象类。也就是说抽象类不一定必须含有抽象方法。
    个人觉得这个属于钻牛角尖的问题吧，因为如果一个抽象类不包含任何抽象方法，为何还要设计为抽象类？
    所以暂且记住这个概念吧，不必去深究为什么。包含抽象方法的类称为抽象类，但并不意味着抽象类中只能
    有抽象方法，它和普通类一样，同样可以拥有成员变量和普通的成员方法。注意，抽象类和普通类的
    主要有三点区别：
    　　1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现
        该方法），缺省情况下默认为public。
    　　2）抽象类不能用来创建对象；
    　　3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，
        则必须将子类也定义为为abstract类。


2、什麽是接口？
    接口，英文称作interface，在软件工程中，接口泛指供别人调用的方法或者函数。从这里，我们可以体会
    到Java语言设计者的初衷，它是对行为的抽象。接口中可以含有 变量和方法。但是要注意，接口中的变量
    会被隐式地指定为public static final变量（并且只能是public static final变量，用private修饰
    会报编译错误），而方法会被隐式地指定为public abstract方法且只能是public abstract方法
    （用其他关键字，比如private、protected、static、 final等修饰会报编译错误），并且接口中所有
    的方法不能有具体的实现，也就是说，接口中的方法必须都是抽象方法。从这里可以隐约看出接口和抽象类
    的区 别，接口是一种极度抽象的类型，它比抽象类更加“抽象”，并且一般情况下不在接口中定义变量。
    允许一个类遵循多个特定的接口。如果一个非抽象类遵循了某个接口，就必须实现该接口中的所有方法。
    对于遵循某个接口的抽象类，可以不实现该接口中的抽象方法。

3、抽象類與接口的區別是什麽？
    1.抽象类可以有构造方法，接口中不能有构造方法。

    2.抽象类中可以有普通成员变量，接口中没有普通成员变量

    3.抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。

    4. 抽象类中的抽象方法的访问类型可以是public，protected和（默认类型,虽然
    eclipse下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public
    abstract类型。

    5. 抽象类中可以包含静态方法，接口中不能包含静态方法

    6. 抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中
    定义的变量只能是public static final类型，并且默认即 为public static final类型。

    7. 一个类可以实现多个接口，但只能继承一个抽象类。

    8. 抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，
    包括属性、行为，但是接口却是对类局部（行为）进行抽象。

    9. 设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种
    辐射式设计。
