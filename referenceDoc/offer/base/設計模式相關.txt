1、請寫一個單例？
    懒汉式：
        public class LazySingleton {
            private static LazySingleton instance;

            private LazySingleton() {}

            public static synchronized LazySingleton getInstance() {
                if (instance == null) {
                    instance = new LazySingleton();
                }
                return instance;
            }

        }
        这种写法能够在多线程中很好的工作，而且看起来它也具备很好的lazy loading，但是，遗憾的是，
        效率很低，99%情况下不需要同步。

    饿汉式：
        public class HungrySingleton {

        	private static HungrySingleton instance = new HungrySingleton();

        	private HungrySingleton(){}

        	public static HungrySingleton getInstance(){
        		return instance;
        	}

        }
        这种方式基于ClassLoader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，
        显然没有达到lazy loading的效果。

    静态内部类：
        public class StaticSingleton {

        	private StaticSingleton(){}

        	private static class SingletonHolder{
        		private static final StaticSingleton instance = new StaticSingleton();
        	}

        	public static final StaticSingleton getInstance(){
        		return SingletonHolder.instance;
        	}

        }
        这种方式同样利用了ClassLoader的机制来保证初始化instance时只有一个线程，它跟第二种不同的是
        （很细微的差别）：第二种方式是只要Singleton类被装载了，那么instance就会被实例化（没有达到
        lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为
        SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载
        SingletonHolder类，从而实例化instance。想象一下，如果实例化instance很消耗资源，我想让他延
        迟加载，另外一方面，我不希望在Singleton类加载时就实例化，因为我不能确保Singleton类还可能在
        其他的地方被主动使用从而被加载，那么这个时候实例化instance显然是不合适的。这个时候，这种方
        式相比第二种方式就显得更合理。

    枚举类：
        public enum EnumSingleton {

        	INSTANCE;

        	public void otherMethod(){
        		System.out.println("execute other method");
        	}

        }
        它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊，不过，
        个人认为由于1.5中才加入enum特性，用这种方式写不免让人感觉生疏。

    双重校验锁：
        public class DoubleCheckSingleton {

        	private DoubleCheckSingleton(){}

        	private volatile static DoubleCheckSingleton instance;

        	public static DoubleCheckSingleton getInstance(){
        		if(instance == null){
        			synchronized (DoubleCheckSingleton.class) {
        				if(instance == null){
        					instance = new DoubleCheckSingleton();
        				}
        			}
        		}
        		return instance;
        	}

        }
        在JDK1.5之后，双重检查锁定才能够正常达到单例效果。

