1、面向对象有哪些特征？
	封装：封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的
	“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。面向对象的封装就是把描述
	一个对象的属性和行为的代码封装在一个“模块”中，也就是一个类中，属性用变量定义，
	行为用方法进行定义，方法可以直接访问同一个对象中的属性。
	
	继承：在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的
	类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，
	这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可
	重用性和可扩展性。
	
	多态：多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时
	并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量
	发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。
	多态性增强了软件的灵活性和扩展性。

2、请给几种获取对象的方式？
	1.通过new调用构造函数创建对象
	2.通过反射Class.newInstance();用这种方式前提条件是该类要么提供一个空的构造函数，要么
	不定义任何有参数的构造函数。
	3.通过调用clone方法，克隆一个对象，用这种方式的前提条件是该类必须继承Cloneable接口
		浅克隆：
		深克隆：


3、java中实现多态的机制是什么？
	父类或接口定义的引用变量直接指向子类或具体实现类的实例对象，在程序调用方法时动态绑定决定调用
	哪个具体实例对象的方法。

4、谈谈java中的根对象？
	类 Object 是类层次结构的根类。每个类都使用 Object 作为超类。所有对象（包括数组）都实现
	这个类的方法。
	
	1.super.getClass()方法？
	 下面程序的输出结果是多少？
		import java.util.Date;
		public  class Test extends Date{
			public static void main(String[] args) {
				new Test().test();
			}
			
			public void test(){
				System.out.println(super.getClass().getName());
			}
		}
		输出：Test
		返回此 Object 的运行时类。返回的 Class 对象是由所表示类的 static synchronized 
		方法锁定的对象。 实际结果类型是 Class<? extends |X|>，其中 |X| 表示清除表达式中的
		静态类型。getClass()在Object类中定义成了final，子类不能覆盖该方法，所以，在test
		方法中调用getClass().getName()方法，其实就是在调用从父类继承的getClass()方法，
		等效于调用super.getClass().getName()方法，所以，
		super.getClass().getName()方法返回的也应该是Test。
		如果想得到父类的名称，应该用如下代码：getClass().getSuperClass().getName();
		
	2."=="和equals方法有什么区别？
		1）对于==，如果作用于基本数据类型的变量，则直接比较其存储的 “值”是否相等；
	　　　　如果作用于引用类型的变量，则比较的是所指向的对象的地址

	　　2）对于equals方法，注意：equals方法不能作用于基本数据类型的变量
	　　　　如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；
	　　　　诸如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容。
	
	3.equals()和hashcode()的关系？
		equals()：
			在没有被重写的情况下是用来判断对象之间是否相等，即比较引用是否相同。重写后一般
			是比较对象内容是否相同。其特性有：
				自反性：对于任何非空引用值 x，x.equals(x) 都应返回 true。 
				
				对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，
					  x.equals(y)才应返回 true。 
					  
				传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，
					     并且 y.equals(z)返回 true，那么 x.equals(z) 应返回 true。 
				
				一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或
					     始终返回 false，前提是对象上 equals 比较中所用的信息没有被修改。 
					     
				对于任何非空引用值 x，x.equals(null) 都应返回 false。
		
		hashCode()：
			返回该对象的哈希码值。支持此方法是为了提高哈希表（例如 java.util.Hashtable 
			提供的哈希表）的性能。
			
		Java对象的eqauls方法和hashCode方法是这样规定的：
			1.如果两个对象相同(eqauls相等)，那么它们的hashCode值一定要相同。
			2.如果两个对象的hashCode相同，它们eqauls并不一定相同。也就是说，
			不同对象的hashCode可能相同；假如两个Java对象A和B，A和B不相等
			（eqauls结果为false），但A和B的哈希码相等，将A和B都存入HashMap时
			会发生哈希冲突，也就是A和B存放在HashMap内部数组的位置索引相同这时HashMap会
			在该位置建立一个链接表，将A和B串起来放在该位置，显然，该情况不违反HashMap的
			使用原则，是允许的。当然，哈希冲突越少越好，尽量采用好的哈希算法以避免哈希冲突。
	

		
		
	 
