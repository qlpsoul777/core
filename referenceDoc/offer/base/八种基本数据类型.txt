1、基本数据类型有哪些?
	数值型：	基本类型				对应包装类型
		整型：
			byte(8) 			Byte
			short(16) 			Short
			int(32)				Integer
			long(64)			Long
		浮点型：
			float(32)			Float
			double(64)			Double
	字符型：
			char(16)			Character
	布尔型：
			boolean(8)			Boolean

2、什麽是自动装箱拆箱?
	Java为每种基本数据类型都提供了对应的包装器类型。在JavaSE5之前，如果要生成一个数值为10的
	Integer对象，必须这样进行：Integer i = new Integer(10);而在从Java SE5开始就提供了自动
	装箱的特性，如果要生成一个数值为10的Integer对象，只需要这样就可以了Integer i = 10;简单
	一点说，装箱就是自动将基本数据类型转换为包装器类型；拆箱就是自动将包装器类型转换为基本数据
	类型。


3、陷阱
   //在-128~127 之外的数
   Integer i1 =200;
   Integer i2 =200;
   System.out.println("i1==i2: "+(i1==i2));  //false
   // 在-128~127 之内的数
   Integer i3 =100;
   Integer i4 =100;
   System.out.println("i3==i4: "+(i3==i4));  //true
   "==" 比较的是两个对象的引用（内存地址）是否相同，也用来比较两个基本数据类型的变量值是否相等。
   int 的自动装箱，是系统执行了 Integer.valueOf(int i)，先看看Integer.java的源码：
   public static Integer valueOf(int i) {
      if(i >= -128 && i <= IntegerCache.high)　　// 没有设置的话，IngegerCache.high默认是127
          return IntegerCache.cache[i + 128];
      else
          return new Integer(i);
  }
  对于–128到127（默认是127）之间的值，Integer.valueOf(int i) 返回的是缓存的Integer对象
  （并不是新建对象）所以范例中，i3 与 i4实际上是指向同一个对象。而其他值，执行
  Integer.valueOf(int i) 返回的是一个新建的 Integer对象，所以范例中，i1与i2 指向的是不同的对象。


4、


5、
		