1、基本数据类型有哪些?
	数值型：	基本类型				对应包装类型
		整型：
			byte(8) 			Byte
			short(16) 			Short
			int(32)				Integer
			long(64)			Long
		浮点型：
			float(32)			Float
			double(64)			Double
	字符型：
			char(16)			Character
	布尔型：
			boolean(8)			Boolean

2、什麽是自动装箱拆箱?
	Java为每种基本数据类型都提供了对应的包装器类型。在JavaSE5之前，如果要生成一个数值为10的
	Integer对象，必须这样进行：Integer i = new Integer(10);而在从Java SE5开始就提供了自动
	装箱的特性，如果要生成一个数值为10的Integer对象，只需要这样就可以了Integer i = 10;简单
	一点说，装箱就是自动将基本数据类型转换为包装器类型；拆箱就是自动将包装器类型转换为基本数据
	类型。


3、陷阱
   //在-128~127 之外的数
   Integer i1 =200;
   Integer i2 =200;
   System.out.println("i1==i2: "+(i1==i2));  //false
   // 在-128~127 之内的数
   Integer i3 =100;
   Integer i4 =100;
   System.out.println("i3==i4: "+(i3==i4));  //true
   "==" 比较的是两个对象的引用（内存地址）是否相同，也用来比较两个基本数据类型的变量值是否相等。
   int 的自动装箱，是系统执行了 Integer.valueOf(int i)，先看看Integer.java的源码：
   public static Integer valueOf(int i) {
      if(i >= -128 && i <= IntegerCache.high)　　// 没有设置的话，IngegerCache.high默认是127
          return IntegerCache.cache[i + 128];
      else
          return new Integer(i);
  }
  对于–128到127（默认是127）之间的值，Integer.valueOf(int i) 返回的是缓存的Integer对象
  （并不是新建对象）所以范例中，i3 与 i4实际上是指向同一个对象。而其他值，执行
  Integer.valueOf(int i) 返回的是一个新建的 Integer对象，所以范例中，i1与i2 指向的是不同的对象。


4、说说&和&&的区别?
	&和&&都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，
	整个运算结果才为true，否则，只要有一方为false，则结果为false。
	
	&&还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于
	if(str != null && !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，
	所以不会出现NullPointerException如果将&&改为&，则会抛出NullPointerException异常
	。If(x==33 & ++y>0) y会增长，If(x==33 && ++y>0)不会增长
	
	&还可以用作位运算符，当&操作符两边的表达式不是boolean类型时，&表示按位与操作，我们通常使用
	0x0f来与一个整数进行&运算，来获取该整数的最低4个bit位，例如，0x31 & 0x0f的结果为0x01。
	

5、switch语句能否作用在byte上，能否作用在long上，能否作用在String上? 
	在switch（expr1）中，expr1只能是一个整数表达式或者枚举常量，整数表达式可以是int基本类型或
	Integer包装类型，由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型
	的包装类型也是可以的。long 不能隐式转换成int类型，所以不能用long类型，String类型在jdk1.7
	之前也不可以，但1.7之后可以。

	
6、short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?
	对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果
	是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。对于short s1 = 1;
	s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。
	
	
7、char型变量中能不能存贮一个中文汉字?为什么?
	char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，
	char型变量中当然可以存储汉字。


8、基本类型和包装类型的区别？
	1.初始值的不同，封装类型的初始值为null，基本类型的的初始值视具体的类型而定，
	比如int类型的初始值为0，boolean类型为false。
	2.使用方式不同，比如在往集合中存取数值型数据时只能使用包装类型。包装类型还提供了一些操作方法可以
	处理数据。
	3.存储方式及位置的不同，基本类型是直接存储变量的值保存在堆栈中能高效的存取，
	封装类型需要通过引用指向实例，具体的实例一般保存在堆中。
	4.在Java中，一切皆对象，但八大基本类型却不是对象。
		