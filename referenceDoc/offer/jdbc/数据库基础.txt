1、什么是数据库三范式(Normal form)？
	第一范式（1NF）：字段具有原子性，不可再分。所有关系型数据库系统都满足第一范式）
		数据库表中的字段都是单一属性的，不可再分。例如，姓名字段，其中的姓和名必须作为一个整体，
		无法区分哪部分是姓，哪部分是名，如果要区分出姓和名，必须设计成两个独立的字段。
		
	第二范式（2NF）：先满足第一范式（1NF），非主属性如果依赖于主键，则必须依赖于所有主键，
	不能存在依赖部分主键的情况。
	
	第三范式（3NF）：先满足第二范式（2NF），一个数据库表中不包含已在其它表中
	已包含的非主关键字信息，即消除冗余。
	
	
2、用过哪些RDBMS？用过哪些NoSql产品？它们的主要应用场景是什么？
	RDBMS:oracle、mysql、sql server、db2...
		主要应用场景：
	NoSql:
		Redis： 通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希
		(Hash/Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)五种类型，
		操作非常方便。
			优点：
				1. 提供非常丰富的数据结构；
				2. Redis提供了事务的功能，可以保证一串 命令的原子性，中间不会被任何操作打断。
				3. 数据存在内存中，读写非常的高速。
			缺点：
				1.由于是内存数据库，所以，单台机器，存储的数据量，跟机器本身的内存大小。虽然
				redis本身有key过期策略，但是还是需要提前预估和节约内存。如果内存增长过快，
				需要定期删除数据。
				2. 持久化功能体验不佳——通过快照方法实现的话，需要每隔一段时间将整个数据库的数据写到
				磁盘上，代价非常高。
			适用场景：
				适用于数据变化快且数据库大小可预见（适合内存容量）的应用程序。比如：会话缓存
				（Session Cache）、全页缓存（FPC）、排行榜/计数器、发布/订阅等。
				
		 MongoDB：MongoDB 是一个高性能，开源，无模式的文档型数据库。它在许多场景下可用于
		 替代传统的关系型数据库或键/值存储方式。
		 	优点：
		 		1. 强大的自动化 shading 功能；
				2. 全索引支持，查询非常高效；
				3. 面向文档（BSON）存储，数据模式简单而强大。
				4. 支持动态查询，查询指令也使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。
				5. 支持 javascript 表达式查询，可在服务器端执行任意的 javascript函数。
		 	缺点：
		 		1. 单个文档大小限制为16M，32位系统上，不支持大于2.5G的数据；
				2. 对内存要求比较大，至少要保证热数据（索引，数据及系统其它开销）都能装进内存；
				3. 非事务机制，无法保证事件的原子性。
			适用场景：	
				游戏场景：使用 MongoDB 存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式
				存储，方便查询、更新。
				物流场景：使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 
				MongoDB 内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来。
				社交场景：使用 MongoDB 存储存储用户信息，以及用户发表的朋友圈信息，通过地理位置
				索引实现附近的人、地点等功能。
				物联网场景：使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并
				对这些信息进行多维度的分析
				视频直播：使用 MongoDB 存储用户信息、礼物信息等

				
		HBase：是 Apache Hadoop 中的一个子项目，属于 bigtable 的开源版本，。HBase
		依托于 Hadoop 的 HDFS（分布式文件系统）作为最基本存储基础单元。HBase在列上实现了 
		BigTable 论文提到的压缩算法、内存操作和布隆过滤器。HBase的表能够作为 MapReduce任务
		的输入和输出，可以通过Java API来访问数据，也可以通过REST、Avro或者Thrift的API来
		访问。
			优点：
				1. 存储容量大，一个表可以容纳上亿行，上百万列；
				2. 可通过版本进行检索，能搜到所需的历史版本数据；
				3. 负载高时，可通过简单的添加机器来实现水平切分扩展，跟Hadoop的无缝集成保障
				了其数据可靠性（HDFS）和海量数据分析的高性能（MapReduce）。
			缺点：
				1.占用内存很大，且鉴于建立在为批量分析而优化的HDFS上，导致读取性能不高；
				2. API相比其它 NoSql 的相对笨拙。
			适用场景：	
				1. bigtable类型的数据存储；
				2. 对数据有版本查询需求；
				3. 应对超大数据量要求扩展简单的需求。

3、基础sql语句？
	DDL(data definition language)
	创建数据库：
		CREATE DATABASE 数据库名
		
	创建数据表：
		Create table T_Students(
			Id int  IDENTITY(1,1) NOT NUL,
			StudentNo char(4),
			CourseNo char(4),
			Score int,
			Primary key(Id),
			Foreign key(CourseNo) References T_Course(CourseNo)
		);
		
	修改表结构，添加字段
	Alter table T_Person add NickName nvarchar(50) null;
	
	修改表结构，删除字段
	Alter table T_Person Drop column NickName;
	 
	删除数据表
	Drop table T_Person;
	
	创建索引
	Create [Unique] Index <索引名> on <基本表名>(<列明序列>);
	
	创建视图
	create View 视图名
	
	
	
	DML(data manipulation language)
	增加：
		INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)
	删除：
		DELETE FROM 表名称 WHERE 列名称 = 值
	修改：
		UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值
	查询：
		SELECT 列名称 FROM 表名称 WHERE 列 运算符 值 ORDER BY 列名 ASC|DESC
		
	分页：
		mysql:
			select * from user_detail where user_id limit 0,20

		oracle:
			SELECT * FROM
			(
			   SELECT A.*, ROWNUM RN
			   FROM (SELECT * FROM TABLE_NAME) A
			   WHERE ROWNUM <= 40
			)
			WHERE RN >= 21

			SELECT * FROM
			(
			   SELECT A.*, ROWNUM RN
			   FROM (SELECT * FROM TABLE_NAME) A
			)
			WHERE RN BETWEEN 21 AND 40
		
	表复制：	
	方法1：语句形式为：SELECT vale1, value2 into Table2 from Table1
		*：Table2可以不存在。

	方法2:语句形式为：Insert into Table2(field1,field2,...) select value1,
	value2,... from Table1
		*：Table2必须存在。
	
	
4、sql语句中的连接方式有哪几种，之间有什么区别与联系？
	外连接(outer join)：
		左连接(left join/left outer join):
			返回的结果会包含左表中所有符合条件的列，如果左表的某行在右表中没有匹配行，则在相关联
			的结果集行中右表的所有选择列表列均为空值。
			select * from table1 left join table2 on table1.id=table2.id
			
		右连接(right join/right outer join):
			返回的结果会包含右表中所有符合条件的列，如果右表的某行在左表中没有匹配行，则在相关联
			的结果集行中左表的所有选择列表列均为空值。
			select * from table1 right join table2 on table1.id=table2.id
			
		全外连接(full join/full outer join):
			返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列均为
			空值。
			select * from table1 full join table2 on table1.id=table2.id
			
	内连接(inner join)：
		内联接是用比较运算符比较要联接列的值的联接
		select * from table1 join table2 on table1.id=table2.id
		select a.*,b.* from table1 a,table2 b where a.id=b.id
		select * from table1 cross join table2 where table1.id=table2.id
		*：cross join后加条件只能用where,不能用on
		
	交叉连接(cross join):
		返回的是两表的乘积，也叫笛卡尔积
		select * from table1 cross join table2
		select * from table1,table2		
	
5、truncate 、delete与drop区别？
	相同点：truncate和不带where子句的delete、以及drop都会删除表数据。
	
	不同点：
	1、truncate 和 delete 只删除数据不删除表的结构(定义)drop 语句将删除表的结构被依赖
	的约束(constrain)、触发器(trigger)、索引(index)；依赖于该表的存储过程/函数将保留,
	但是变为 invalid 状态。
	2、速度，一般来说: drop> truncate > delete
	3、delete 语句是数据库操作语言(dml)，这个操作会放到 回滚段中，事务提交之
	后才生效；如果有相应的 触发器，执行的时候将被触发。truncate、drop 是数据库定义语言
	(ddl)，操作立即生效，原数据不放到回滚段中，不能回滚，操作不触发 触发器。	
	
6、如果一个SQL执行时间比较长怎么办？
	使用工具分析慢查询日志、或者用explain查看SQL的执行计划、或者查看sql监视器，找出执行缓慢的sql
	然后有针对性的进行sql优化
	常见优化方式：
		1.在合适的列上使用索引
			如何选择合适的列呢？
				1.在where从句，group by从句，order by从句，on从句中出现的列
				2.尽量选择区分度高的列作为索引，即字段值重复少的
				3.建在小字段上，对于大的文本字段甚至超长字段，不要建索引
				4.基本不参与计算的列
				5.主键和外键上
		2.只查询必要的列，尽量避免使用select * 。
		3.数据不重复的情况下用union all 代替union、如果有索引的话还可以代替OR。
		4.尽量避免在where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，
		可以给一个无歧义的默认值
		5.应尽量避免在where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描
		6.应尽量避免在where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描
		7.in 和not in 也要慎用，否则会导致全表扫描,如果子查询结果集少可以用in和not in，如果
		子查询的结果多，可以用exist代替in
		8.用全文检索代替like查询
		9.不要在where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法
		正确使用索引
		10.用EXISTS替换DISTINCT
		11.对于大表可以采用分库分表，做垂直水平扩展。
		

7、触发器和存储过程？
	触发器与存储过程的主要区别在于触发器的运行方式。存储过程必须有用户、应用程序或者触发器来显示的
	调用并执行，而触发器是当触发条件被触发的时候，自动执行的，与连接用数据库中的用户、或者应用程序
	无关。触发器没有返回值，存储过程可以有返回值
	
	触发器是一种特殊类型的存储过程，它主要用于强制复杂的业务规则或要求。
	
	存储过程是 SQL 语句和可选控制流语句的预编译集合，以一个名称存储并作为一个单元处理，存储在数据
	库内，可由应用程序通过一个调用执行，而且允许用户声明变量、有条件执行以及其它强大的编程功能。
	存储过程可包含程序流、逻辑以及对数据库的查询。它们可以接受参数、输出参数、返回单个或多个结果
	集以及返回值。可以出于任何使用 SQL 语句的目的来使用存储过程，它具有以下优点：
		可以在单个存储过程中执行一系列 SQL 语句。
		可以从自己的存储过程内引用其它存储过程，这可以简化一系列复杂语句。
		存储过程在创建时即在服务器上进行编译，所以执行起来比单个 SQL 语句快。
		
8、视图和表？
	视图（view）是在基本表之上建立的表，它的结构（即所定义的列）和内容（即所有数据行）都来自基本表
	，它依据基本表存在而存在。一个视图可以对应一个基本表，也可以对应多个基本表。视图是基本表的抽象
	和在逻辑意义上建立的新关系
	区别：
	1、视图是已经编译好的sql语句。而表不是 
	2、视图没有实际的物理记录。而表有。 
	3、表是内容，视图是窗口 
	4、表只用物理空间而视图不占用物理空间，视图只是逻辑概念的存在，表可以及时四对它进行修改，但视图
	只能有创建的语句来修改 
	5、表是内模式，视图是外模式 
	6、视图是查看数据表的一种方法，可以查询数据表中某些字段构成的数据，只是一些SQL语句的集合。
	从安全的角度说，视图可以不给用户接触数据表，从而不知道表结构。 
	7、表属于全局模式中的表，是实表；视图属于局部模式的表，是虚表。 
	8、视图的建立和删除只影响视图本身，不影响对应的基本表


9、数据库事务的四大特性以及事务的隔离级别？
	原子性（Atomicity）
　　		原子性是指事务包含的所有操作要么全部成功，要么全部失败。
	一致性（Consistency）
		一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之
		前和执行之后都必须处于一致性状态。
	隔离性（Isolation）
		隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能
		被其他事务的操作所干扰，多个并发事务之间要相互隔离。
	持久性（Durability）
		持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系
		统遇到故障的情况下也不会丢失提交事务的操作。
	
	隔离性会导致一下几种问题：
		脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。
		
		不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于
		在查询间隔，被另一个事务修改并提交了。
		
		幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”
		修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”
		并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，
		其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。
		
	在jdbc编程中为了解决隔离性问题，需要设置隔离级别，如果是使用JDBC对数据库的事务设置隔离级别的话，
	也应该是在调用Connection对象的setAutoCommit(false)方法之前。调用Connection对象的
	setTransactionIsolation(level)即可设置当前链接的隔离级别，至于参数level，
	可以使用Connection对象的字段：
		conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
        conn.setAutoCommit(false);
	
10、union和union all有什么不同?
	UNION在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复
	的记录再返回结果。
	而UNION ALL只是简单的将两个结果合并后就返回。这样，如果返回的两个结果集中有重复的数据，那么
	返回的结果集就会包含重复的数据了。
　	从效率上说，UNION ALL 要比UNION快很多，所以，如果可以确认合并的两个结果集中不包含重复的数据
	的话，那么就使用UNION ALL
	
11、select for update和select for update nowait?
	该语句用来锁定特定的行（如果有where子句，就是满足where条件的那些行）。当这些行被锁定后，
	其他会话可以选择这些行，但不能更改或删除这些行，直到该语句的事务被commit语句或rollback语
	句结束为止。如果仅仅用update语句来更改数据时，可能会因为加不上锁而没有响应地、莫名其妙地等待
	，但如果在此之前，先用Select…For Update NOWAIT语句将要更改的数据试探性地加锁，就可以
	通过立即返回的错误提示而明白有其他事务正操作。
	
	
	