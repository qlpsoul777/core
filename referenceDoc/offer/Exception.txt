1、Java异常类层次结构？
	Throwable：有两个重要的子类：Exception（异常）和 Error（错误），
	二者都是 Java 异常处理的重要子类
		Error:错误是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与
		代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。
			VirtulMachineError:
				StackOverFlowError
				OutOfMemoryError
			AWTError
			...
			
		Exception:异常，是程序本身可以处理的异常。
			非运行时异常 （编译异常）:
				IOException	操作输入流和输出流时可能出现的异常。
					EOFException			文件异常结束	
					FileNotFoundException   文件未找到异常
					SocketException			网络通信异常
					...
				SQLException			操作数据库异常
				NoSuchMethodException	方法未找到抛出的异常
				ParseException			解析时出现异常
				ClassNotFoundException	找不到类异常
				...
			RuntimeException:
				NullPointerException			空指针异常
				ArrayIndexOutOfBoundException 	数组索引越界异常
				ArithmeticException				算术条件异常
				IllegalArgumentException		非法参数异常
				ClassCastException				对象强制转换异常
				UnsupportedOperationException	不支持请求的操作异常
				...


2、什么是unchecked exception、checked exception？
	unchecked exception：
		非受检异常(编译器不强制要求处置的异常)包括运行时异常（RuntimeException与其子类）
		和错误（Error）。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能
		避免这类异常的发生。Java编译器不强制要求处理。 也就是说，这类异常再程序中，可以进行处理
		，也可以不处理。
		
	checked exception：
		受检异常（编译器要求必须处置的异常）除了RuntimeException及其子类以外，其他的
		Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，
		当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，
		否则编译不会通过。


3、java的异常处理机制？
	捕获并处理：捕捉异常通过try-catch语句或者try-catch-finally语句实现。
		try {
            // 可能会发生异常的程序代码
        } catch (Exception1 e) {
            // 捕获并处置try抛出的异常类型Exception1 
        }catch (Exception2 e) {
            // 捕获并处置try抛出的异常类型Exception2
        }finally{
            // 无论是否发生异常，都将执行的语句块
        }
        *：
        	1、一个方法所能捕捉的异常，一定是Java代码在某处所抛出的异常。简单地说，
        	异常总是先被抛出，后被捕捉的。
        	
        	2、一旦某个catch捕获到匹配的异常类型，将进入异常处理代码。一经处理结束，
        	就意味着整个try-catch语句结束。其他的catch子句不再有匹配和捕获异常类型的机会。
        	此处Exception1不能是Exception2的父类。
        	
        	3、try后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。
        	
        	4、当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。
        	在以下4种特殊情况下，finally块不会被执行：
				1）在finally语句块中发生了异常。
				2）在前面的代码中用了System.exit()退出程序。
				3）程序所在的线程死亡。
				4）关闭CPU。
	
	向上抛出：当出现异常没办法处理时可以向上抛出异常
		throws抛出异常：Method throws Exception1,Exception2,...,ExceptionN{ }
			*:
				1、必须声明方法可抛出的任何checked exception。即如果一个方法出现受可查异常
				，要么用try-catch语句捕获，要么用throws子句声明将它抛出，否则会导致编译错误。
			
				2、仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。
			
				3、若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法
				所声明异常的同类或子类。
		
		throw抛出异常：Method{
						if(XX == null){throw new Exception()}
					}
			*:
				1、throw总是出现在函数体中，用来抛出一个Throwable或者其子类的实例对象。
				
				2、如果抛出了检查异常，则还应该在方法头部声明方法可能抛出的异常类型。
				该方法的调用者也必须检查处理抛出的异常。


4、try、catch、finally语句块的执行顺序？
	1、当try没有捕获到异常时：
		try语句块中的语句逐一被执行，程序将跳过catch语句块，执行finally语句块和其后的语句。
		
	2、 当try捕获到异常，但没有处理此异常的情况：
		程序将跳过try出错后的语句块，执行finally语句块和其后的语句。
		
	3、 当try捕获到异常，并正确处理该异常：
		在try语句块中是按照顺序来执行的，当执行到某一条语句出现异常时，程序将跳到catch语句块，
		并与catch语句块逐一匹配，找到与之对应的处理程序，其他的catch语句块将不会被执行，
		而try语句块中，出现异常之后的语句也不会被执行，catch语句块执行完后，
		执行finally语句块里的语句，最后执行finally语句块后的语句。
		
	       *：当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。
	        eg:
		        mainMethod(){
		        	System.out.println("main result:" + getResult());
		        }
		        
		        getResult(){
		        	int result;
			        try {
			            throw new RuntimeException();
			        } catch (Exception e) {
			            result = 6;
			            return result;
			        } finally {
			            result = 7;
			            System.out.println("inner result:" + result);
			        }
			        return result;
		        }                           
			结果：
				inner result:7
				main result:6
				
			*：当在try块或catch块中遇到return语句，在finally中也有return语句时
			eg:
				mainMethod(){
			        	System.out.println("main result:" + getResult());
			        }
			
			public int  getResult(){
				try{
					return 1 ;
				}
				finally{
					return 2 ;
				}
			}
			结果：
				main result:2
			return并不是让函数马上返回，而是return语句执行后，将把返回结果放置进函数栈中，
			此时函数并不是马上返回，它要执行finally语句后才真正开始返回。


5、Throwable类中的常用方法？
	getCause()：返回抛出异常的原因。如果 cause 不存在或未知，则返回 null。

	getMeage()：返回异常的消息信息。

	printStackTrace()：对象的堆栈跟踪输出至错误输出流，作为字段 System.err的值。
				
				